versions pytest-7.4.3, python-3.10.8.final.0
cwd=/Users/maverick/ansible_roles_test/lemp/molecule/default
args=('--ansible-inventory', '/Users/maverick/.cache/molecule/lemp/default/inventory', '--connection', 'ansible', '--debug', '-p', 'no:cacheprovider', '/Users/maverick/ansible_roles_test/lemp/molecule/default/tests/test_default.py', '-vvv')

  pytest_cmdline_main [hook]
      config: <_pytest.config.Config object at 0x105bad480>
    pytest_plugin_registered [hook]
        plugin: <Session maverick exitstatus='<UNSET>' testsfailed=0 testscollected=0>
        manager: <_pytest.config.PytestPluginManager object at 0x105013520>
    finish pytest_plugin_registered --> [] [hook]
    pytest_configure [hook]
        config: <_pytest.config.Config object at 0x105bad480>
    early skip of rewriting module: faulthandler [assertion]
      pytest_plugin_registered [hook]
          plugin: <class '_pytest.legacypath.LegacyTmpdirPlugin'>
          manager: <_pytest.config.PytestPluginManager object at 0x105013520>
      finish pytest_plugin_registered --> [] [hook]
    early skip of rewriting module: pdb [assertion]
    early skip of rewriting module: cmd [assertion]
    early skip of rewriting module: code [assertion]
    early skip of rewriting module: codeop [assertion]
      pytest_plugin_registered [hook]
          plugin: <_pytest.config.PytestPluginManager object at 0x105013520>
          manager: <_pytest.config.PytestPluginManager object at 0x105013520>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.config.Config object at 0x105bad480>
          manager: <_pytest.config.PytestPluginManager object at 0x105013520>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.mark' from '/Users/maverick/.pyenv/versions/3.10.8/envs/ansible-env/lib/python3.10/site-packages/_pytest/mark/__init__.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x105013520>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.main' from '/Users/maverick/.pyenv/versions/3.10.8/envs/ansible-env/lib/python3.10/site-packages/_pytest/main.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x105013520>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.runner' from '/Users/maverick/.pyenv/versions/3.10.8/envs/ansible-env/lib/python3.10/site-packages/_pytest/runner.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x105013520>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.fixtures' from '/Users/maverick/.pyenv/versions/3.10.8/envs/ansible-env/lib/python3.10/site-packages/_pytest/fixtures.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x105013520>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.helpconfig' from '/Users/maverick/.pyenv/versions/3.10.8/envs/ansible-env/lib/python3.10/site-packages/_pytest/helpconfig.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x105013520>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.python' from '/Users/maverick/.pyenv/versions/3.10.8/envs/ansible-env/lib/python3.10/site-packages/_pytest/python.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x105013520>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.terminal' from '/Users/maverick/.pyenv/versions/3.10.8/envs/ansible-env/lib/python3.10/site-packages/_pytest/terminal.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x105013520>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.debugging' from '/Users/maverick/.pyenv/versions/3.10.8/envs/ansible-env/lib/python3.10/site-packages/_pytest/debugging.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x105013520>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.unittest' from '/Users/maverick/.pyenv/versions/3.10.8/envs/ansible-env/lib/python3.10/site-packages/_pytest/unittest.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x105013520>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.capture' from '/Users/maverick/.pyenv/versions/3.10.8/envs/ansible-env/lib/python3.10/site-packages/_pytest/capture.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x105013520>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.skipping' from '/Users/maverick/.pyenv/versions/3.10.8/envs/ansible-env/lib/python3.10/site-packages/_pytest/skipping.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x105013520>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.legacypath' from '/Users/maverick/.pyenv/versions/3.10.8/envs/ansible-env/lib/python3.10/site-packages/_pytest/legacypath.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x105013520>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.tmpdir' from '/Users/maverick/.pyenv/versions/3.10.8/envs/ansible-env/lib/python3.10/site-packages/_pytest/tmpdir.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x105013520>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.monkeypatch' from '/Users/maverick/.pyenv/versions/3.10.8/envs/ansible-env/lib/python3.10/site-packages/_pytest/monkeypatch.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x105013520>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.recwarn' from '/Users/maverick/.pyenv/versions/3.10.8/envs/ansible-env/lib/python3.10/site-packages/_pytest/recwarn.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x105013520>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.pastebin' from '/Users/maverick/.pyenv/versions/3.10.8/envs/ansible-env/lib/python3.10/site-packages/_pytest/pastebin.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x105013520>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.nose' from '/Users/maverick/.pyenv/versions/3.10.8/envs/ansible-env/lib/python3.10/site-packages/_pytest/nose.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x105013520>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.assertion' from '/Users/maverick/.pyenv/versions/3.10.8/envs/ansible-env/lib/python3.10/site-packages/_pytest/assertion/__init__.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x105013520>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.junitxml' from '/Users/maverick/.pyenv/versions/3.10.8/envs/ansible-env/lib/python3.10/site-packages/_pytest/junitxml.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x105013520>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.doctest' from '/Users/maverick/.pyenv/versions/3.10.8/envs/ansible-env/lib/python3.10/site-packages/_pytest/doctest.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x105013520>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.freeze_support' from '/Users/maverick/.pyenv/versions/3.10.8/envs/ansible-env/lib/python3.10/site-packages/_pytest/freeze_support.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x105013520>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.setuponly' from '/Users/maverick/.pyenv/versions/3.10.8/envs/ansible-env/lib/python3.10/site-packages/_pytest/setuponly.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x105013520>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.setupplan' from '/Users/maverick/.pyenv/versions/3.10.8/envs/ansible-env/lib/python3.10/site-packages/_pytest/setupplan.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x105013520>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.warnings' from '/Users/maverick/.pyenv/versions/3.10.8/envs/ansible-env/lib/python3.10/site-packages/_pytest/warnings.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x105013520>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.logging' from '/Users/maverick/.pyenv/versions/3.10.8/envs/ansible-env/lib/python3.10/site-packages/_pytest/logging.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x105013520>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.reports' from '/Users/maverick/.pyenv/versions/3.10.8/envs/ansible-env/lib/python3.10/site-packages/_pytest/reports.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x105013520>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.python_path' from '/Users/maverick/.pyenv/versions/3.10.8/envs/ansible-env/lib/python3.10/site-packages/_pytest/python_path.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x105013520>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.unraisableexception' from '/Users/maverick/.pyenv/versions/3.10.8/envs/ansible-env/lib/python3.10/site-packages/_pytest/unraisableexception.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x105013520>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.threadexception' from '/Users/maverick/.pyenv/versions/3.10.8/envs/ansible-env/lib/python3.10/site-packages/_pytest/threadexception.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x105013520>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.faulthandler' from '/Users/maverick/.pyenv/versions/3.10.8/envs/ansible-env/lib/python3.10/site-packages/_pytest/faulthandler.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x105013520>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module 'testinfra.plugin' from '/Users/maverick/.pyenv/versions/3.10.8/envs/ansible-env/lib/python3.10/site-packages/testinfra/plugin.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x105013520>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <CaptureManager _method='fd' _global_capturing=<MultiCapture out=<FDCapture 1 oldfd=5 _state='suspended' tmpfile=<_io.TextIOWrapper name="<_io.FileIO name=6 mode='rb+' closefd=True>" mode='r+' encoding='utf-8'>> err=<FDCapture 2 oldfd=7 _state='suspended' tmpfile=<_io.TextIOWrapper name="<_io.FileIO name=8 mode='rb+' closefd=True>" mode='r+' encoding='utf-8'>> in_=<FDCapture 0 oldfd=3 _state='started' tmpfile=<_io.TextIOWrapper name='/dev/null' mode='r' encoding='utf-8'>> _state='suspended' _in_suspended=False> _capture_fixture=None>
          manager: <_pytest.config.PytestPluginManager object at 0x105013520>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <Session maverick exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
          manager: <_pytest.config.PytestPluginManager object at 0x105013520>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <class '_pytest.legacypath.LegacyTmpdirPlugin'>
          manager: <_pytest.config.PytestPluginManager object at 0x105013520>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.terminal.TerminalReporter object at 0x105c93040>
          manager: <_pytest.config.PytestPluginManager object at 0x105013520>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.logging.LoggingPlugin object at 0x105c93220>
          manager: <_pytest.config.PytestPluginManager object at 0x105013520>
      finish pytest_plugin_registered --> [] [hook]
    finish pytest_configure --> [] [hook]
    pytest_sessionstart [hook]
        session: <Session maverick exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
      pytest_plugin_registered [hook]
          plugin: <_pytest.config.PytestPluginManager object at 0x105013520>
          manager: <_pytest.config.PytestPluginManager object at 0x105013520>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.config.Config object at 0x105bad480>
          manager: <_pytest.config.PytestPluginManager object at 0x105013520>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.mark' from '/Users/maverick/.pyenv/versions/3.10.8/envs/ansible-env/lib/python3.10/site-packages/_pytest/mark/__init__.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x105013520>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.main' from '/Users/maverick/.pyenv/versions/3.10.8/envs/ansible-env/lib/python3.10/site-packages/_pytest/main.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x105013520>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.runner' from '/Users/maverick/.pyenv/versions/3.10.8/envs/ansible-env/lib/python3.10/site-packages/_pytest/runner.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x105013520>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.fixtures' from '/Users/maverick/.pyenv/versions/3.10.8/envs/ansible-env/lib/python3.10/site-packages/_pytest/fixtures.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x105013520>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.helpconfig' from '/Users/maverick/.pyenv/versions/3.10.8/envs/ansible-env/lib/python3.10/site-packages/_pytest/helpconfig.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x105013520>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.python' from '/Users/maverick/.pyenv/versions/3.10.8/envs/ansible-env/lib/python3.10/site-packages/_pytest/python.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x105013520>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.terminal' from '/Users/maverick/.pyenv/versions/3.10.8/envs/ansible-env/lib/python3.10/site-packages/_pytest/terminal.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x105013520>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.debugging' from '/Users/maverick/.pyenv/versions/3.10.8/envs/ansible-env/lib/python3.10/site-packages/_pytest/debugging.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x105013520>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.unittest' from '/Users/maverick/.pyenv/versions/3.10.8/envs/ansible-env/lib/python3.10/site-packages/_pytest/unittest.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x105013520>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.capture' from '/Users/maverick/.pyenv/versions/3.10.8/envs/ansible-env/lib/python3.10/site-packages/_pytest/capture.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x105013520>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.skipping' from '/Users/maverick/.pyenv/versions/3.10.8/envs/ansible-env/lib/python3.10/site-packages/_pytest/skipping.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x105013520>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.legacypath' from '/Users/maverick/.pyenv/versions/3.10.8/envs/ansible-env/lib/python3.10/site-packages/_pytest/legacypath.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x105013520>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.tmpdir' from '/Users/maverick/.pyenv/versions/3.10.8/envs/ansible-env/lib/python3.10/site-packages/_pytest/tmpdir.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x105013520>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.monkeypatch' from '/Users/maverick/.pyenv/versions/3.10.8/envs/ansible-env/lib/python3.10/site-packages/_pytest/monkeypatch.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x105013520>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.recwarn' from '/Users/maverick/.pyenv/versions/3.10.8/envs/ansible-env/lib/python3.10/site-packages/_pytest/recwarn.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x105013520>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.pastebin' from '/Users/maverick/.pyenv/versions/3.10.8/envs/ansible-env/lib/python3.10/site-packages/_pytest/pastebin.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x105013520>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.nose' from '/Users/maverick/.pyenv/versions/3.10.8/envs/ansible-env/lib/python3.10/site-packages/_pytest/nose.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x105013520>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.assertion' from '/Users/maverick/.pyenv/versions/3.10.8/envs/ansible-env/lib/python3.10/site-packages/_pytest/assertion/__init__.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x105013520>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.junitxml' from '/Users/maverick/.pyenv/versions/3.10.8/envs/ansible-env/lib/python3.10/site-packages/_pytest/junitxml.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x105013520>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.doctest' from '/Users/maverick/.pyenv/versions/3.10.8/envs/ansible-env/lib/python3.10/site-packages/_pytest/doctest.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x105013520>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.freeze_support' from '/Users/maverick/.pyenv/versions/3.10.8/envs/ansible-env/lib/python3.10/site-packages/_pytest/freeze_support.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x105013520>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.setuponly' from '/Users/maverick/.pyenv/versions/3.10.8/envs/ansible-env/lib/python3.10/site-packages/_pytest/setuponly.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x105013520>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.setupplan' from '/Users/maverick/.pyenv/versions/3.10.8/envs/ansible-env/lib/python3.10/site-packages/_pytest/setupplan.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x105013520>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.warnings' from '/Users/maverick/.pyenv/versions/3.10.8/envs/ansible-env/lib/python3.10/site-packages/_pytest/warnings.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x105013520>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.logging' from '/Users/maverick/.pyenv/versions/3.10.8/envs/ansible-env/lib/python3.10/site-packages/_pytest/logging.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x105013520>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.reports' from '/Users/maverick/.pyenv/versions/3.10.8/envs/ansible-env/lib/python3.10/site-packages/_pytest/reports.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x105013520>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.python_path' from '/Users/maverick/.pyenv/versions/3.10.8/envs/ansible-env/lib/python3.10/site-packages/_pytest/python_path.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x105013520>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.unraisableexception' from '/Users/maverick/.pyenv/versions/3.10.8/envs/ansible-env/lib/python3.10/site-packages/_pytest/unraisableexception.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x105013520>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.threadexception' from '/Users/maverick/.pyenv/versions/3.10.8/envs/ansible-env/lib/python3.10/site-packages/_pytest/threadexception.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x105013520>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.faulthandler' from '/Users/maverick/.pyenv/versions/3.10.8/envs/ansible-env/lib/python3.10/site-packages/_pytest/faulthandler.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x105013520>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module 'testinfra.plugin' from '/Users/maverick/.pyenv/versions/3.10.8/envs/ansible-env/lib/python3.10/site-packages/testinfra/plugin.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x105013520>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <CaptureManager _method='fd' _global_capturing=<MultiCapture out=<FDCapture 1 oldfd=5 _state='suspended' tmpfile=<_io.TextIOWrapper name="<_io.FileIO name=6 mode='rb+' closefd=True>" mode='r+' encoding='utf-8'>> err=<FDCapture 2 oldfd=7 _state='suspended' tmpfile=<_io.TextIOWrapper name="<_io.FileIO name=8 mode='rb+' closefd=True>" mode='r+' encoding='utf-8'>> in_=<FDCapture 0 oldfd=3 _state='started' tmpfile=<_io.TextIOWrapper name='/dev/null' mode='r' encoding='utf-8'>> _state='suspended' _in_suspended=False> _capture_fixture=None>
          manager: <_pytest.config.PytestPluginManager object at 0x105013520>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <Session maverick exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
          manager: <_pytest.config.PytestPluginManager object at 0x105013520>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <class '_pytest.legacypath.LegacyTmpdirPlugin'>
          manager: <_pytest.config.PytestPluginManager object at 0x105013520>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.terminal.TerminalReporter object at 0x105c93040>
          manager: <_pytest.config.PytestPluginManager object at 0x105013520>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.logging.LoggingPlugin object at 0x105c93220>
          manager: <_pytest.config.PytestPluginManager object at 0x105013520>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.fixtures.FixtureManager object at 0x105c90910>
          manager: <_pytest.config.PytestPluginManager object at 0x105013520>
      finish pytest_plugin_registered --> [] [hook]
      pytest_report_header [hook]
          config: <_pytest.config.Config object at 0x105bad480>
          start_path: /Users/maverick/ansible_roles_test/lemp/molecule/default
          startdir: /Users/maverick/ansible_roles_test/lemp/molecule/default
      early skip of rewriting module: email.parser [assertion]
      early skip of rewriting module: email.feedparser [assertion]
      finish pytest_report_header --> [['rootdir: /Users/maverick', 'plugins: testinfra-10.0.0'], ['using: pytest-7.4.3', 'setuptools registered plugins:', '  pytest-testinfra-10.0.0 at /Users/maverick/.pyenv/versions/3.10.8/envs/ansible-env/lib/python3.10/site-packages/testinfra/plugin.py']] [hook]
    finish pytest_sessionstart --> [] [hook]
    pytest_collection [hook]
        session: <Session maverick exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
    perform_collect <Session maverick exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0> ['/Users/maverick/ansible_roles_test/lemp/molecule/default/tests/test_default.py'] [collection]
        pytest_collectstart [hook]
            collector: <Session maverick exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
        finish pytest_collectstart --> [] [hook]
        pytest_make_collect_report [hook]
            collector: <Session maverick exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
        processing argument (PosixPath('/Users/maverick/ansible_roles_test/lemp/molecule/default/tests/test_default.py'), []) [collection]
            pytest_collect_file [hook]
                parent: <Session maverick exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
                file_path: /Users/maverick/ansible_roles_test/lemp/molecule/default/tests/test_default.py
                path: /Users/maverick/ansible_roles_test/lemp/molecule/default/tests/test_default.py
              pytest_pycollect_makemodule [hook]
                  parent: <Session maverick exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
                  module_path: /Users/maverick/ansible_roles_test/lemp/molecule/default/tests/test_default.py
                  path: /Users/maverick/ansible_roles_test/lemp/molecule/default/tests/test_default.py
              finish pytest_pycollect_makemodule --> <Module ansible_roles_test/lemp/molecule/default/tests/test_default.py> [hook]
            finish pytest_collect_file --> [<Module ansible_roles_test/lemp/molecule/default/tests/test_default.py>] [hook]
          matchnodes [<Module ansible_roles_test/lemp/molecule/default/tests/test_default.py>] [] [collection]
            matchnodes finished ->  1 nodes [collection]
        finish pytest_make_collect_report --> <CollectReport '' lenresult=1 outcome='passed'> [hook]
        pytest_collectreport [hook]
            report: <CollectReport '' lenresult=1 outcome='passed'>
        finish pytest_collectreport --> [] [hook]
    genitems <Module ansible_roles_test/lemp/molecule/default/tests/test_default.py> [collection]
      pytest_collectstart [hook]
          collector: <Module ansible_roles_test/lemp/molecule/default/tests/test_default.py>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Module ansible_roles_test/lemp/molecule/default/tests/test_default.py>
      find_module called for: test_default [assertion]
      matched test file (was specified on cmdline): '/Users/maverick/ansible_roles_test/lemp/molecule/default/tests/test_default.py' [assertion]
      found cached rewritten pyc for /Users/maverick/ansible_roles_test/lemp/molecule/default/tests/test_default.py [assertion]
      matched marked file 'testinfra.utils' (from 'testinfra') [assertion]
      find_module called for: testinfra.utils [assertion]
      found cached rewritten pyc for /Users/maverick/.pyenv/versions/3.10.8/envs/ansible-env/lib/python3.10/site-packages/testinfra/utils/__init__.py [assertion]
      matched marked file 'testinfra.utils.ansible_runner' (from 'testinfra') [assertion]
      find_module called for: testinfra.utils.ansible_runner [assertion]
      found cached rewritten pyc for /Users/maverick/.pyenv/versions/3.10.8/envs/ansible-env/lib/python3.10/site-packages/testinfra/utils/ansible_runner.py [assertion]
      early skip of rewriting module: configparser [assertion]
      early skip of rewriting module: ipaddress [assertion]
      matched marked file 'testinfra.backend.local' (from 'testinfra') [assertion]
      find_module called for: testinfra.backend.local [assertion]
      found cached rewritten pyc for /Users/maverick/.pyenv/versions/3.10.8/envs/ansible-env/lib/python3.10/site-packages/testinfra/backend/local.py [assertion]
        pytest_pycollect_makeitem [hook]
            collector: <Module ansible_roles_test/lemp/molecule/default/tests/test_default.py>
            name: @py_builtins
            obj: <module 'builtins' (built-in)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module ansible_roles_test/lemp/molecule/default/tests/test_default.py>
            name: @pytest_ar
            obj: <module '_pytest.assertion.rewrite' from '/Users/maverick/.pyenv/versions/3.10.8/envs/ansible-env/lib/python3.10/site-packages/_pytest/assertion/rewrite.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module ansible_roles_test/lemp/molecule/default/tests/test_default.py>
            name: os
            obj: <module 'os' from '/Users/maverick/.pyenv/versions/3.10.8/lib/python3.10/os.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module ansible_roles_test/lemp/molecule/default/tests/test_default.py>
            name: pytest
            obj: <module 'pytest' from '/Users/maverick/.pyenv/versions/3.10.8/envs/ansible-env/lib/python3.10/site-packages/pytest/__init__.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module ansible_roles_test/lemp/molecule/default/tests/test_default.py>
            name: testinfra
            obj: <module 'testinfra' from '/Users/maverick/.pyenv/versions/3.10.8/envs/ansible-env/lib/python3.10/site-packages/testinfra/__init__.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module ansible_roles_test/lemp/molecule/default/tests/test_default.py>
            name: testinfra_hosts
            obj: ['instance']
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module ansible_roles_test/lemp/molecule/default/tests/test_default.py>
            name: test_pkg
            obj: <function test_pkg at 0x105cfcca0>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x105df5a80>
          matched marked file 'testinfra.backend.ansible' (from 'testinfra') [assertion]
          find_module called for: testinfra.backend.ansible [assertion]
          found cached rewritten pyc for /Users/maverick/.pyenv/versions/3.10.8/envs/ansible-env/lib/python3.10/site-packages/testinfra/backend/ansible.py [assertion]
          early skip of rewriting module: encodings.unicode_escape [assertion]
            pytest_make_parametrize_id [hook]
                config: <_pytest.config.Config object at 0x105bad480>
                val: nginx
                argname: pkg
            finish pytest_make_parametrize_id --> None [hook]
            pytest_make_parametrize_id [hook]
                config: <_pytest.config.Config object at 0x105bad480>
                val: mariadb-server
                argname: pkg
            finish pytest_make_parametrize_id --> None [hook]
            pytest_make_parametrize_id [hook]
                config: <_pytest.config.Config object at 0x105bad480>
                val: php-fpm
                argname: pkg
            finish pytest_make_parametrize_id --> None [hook]
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_pkg[ansible://instance-nginx]>, <Function test_pkg[ansible://instance-mariadb-server]>, <Function test_pkg[ansible://instance-php-fpm]>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module ansible_roles_test/lemp/molecule/default/tests/test_default.py>
            name: test_svc
            obj: <function test_svc at 0x105cfe0e0>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x105df5b10>
            pytest_make_parametrize_id [hook]
                config: <_pytest.config.Config object at 0x105bad480>
                val: nginx
                argname: svc
            finish pytest_make_parametrize_id --> None [hook]
            pytest_make_parametrize_id [hook]
                config: <_pytest.config.Config object at 0x105bad480>
                val: mariadb
                argname: svc
            finish pytest_make_parametrize_id --> None [hook]
            pytest_make_parametrize_id [hook]
                config: <_pytest.config.Config object at 0x105bad480>
                val: php8.1-fpm
                argname: svc
            finish pytest_make_parametrize_id --> None [hook]
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_svc[ansible://instance-nginx]>, <Function test_svc[ansible://instance-mariadb]>, <Function test_svc[ansible://instance-php8.1-fpm]>] [hook]
      finish pytest_make_collect_report --> <CollectReport 'ansible_roles_test/lemp/molecule/default/tests/test_default.py' lenresult=6 outcome='passed'> [hook]
    genitems <Function test_pkg[ansible://instance-nginx]> [collection]
      pytest_itemcollected [hook]
          item: <Function test_pkg[ansible://instance-nginx]>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_pkg[ansible://instance-mariadb-server]> [collection]
      pytest_itemcollected [hook]
          item: <Function test_pkg[ansible://instance-mariadb-server]>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_pkg[ansible://instance-php-fpm]> [collection]
      pytest_itemcollected [hook]
          item: <Function test_pkg[ansible://instance-php-fpm]>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_svc[ansible://instance-nginx]> [collection]
      pytest_itemcollected [hook]
          item: <Function test_svc[ansible://instance-nginx]>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_svc[ansible://instance-mariadb]> [collection]
      pytest_itemcollected [hook]
          item: <Function test_svc[ansible://instance-mariadb]>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_svc[ansible://instance-php8.1-fpm]> [collection]
      pytest_itemcollected [hook]
          item: <Function test_svc[ansible://instance-php8.1-fpm]>
      finish pytest_itemcollected --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'ansible_roles_test/lemp/molecule/default/tests/test_default.py' lenresult=6 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
      pytest_collection_modifyitems [hook]
          session: <Session maverick exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
          config: <_pytest.config.Config object at 0x105bad480>
          items: [<Function test_pkg[ansible://instance-nginx]>, <Function test_pkg[ansible://instance-mariadb-server]>, <Function test_pkg[ansible://instance-php-fpm]>, <Function test_svc[ansible://instance-nginx]>, <Function test_svc[ansible://instance-mariadb]>, <Function test_svc[ansible://instance-php8.1-fpm]>]
      finish pytest_collection_modifyitems --> [] [hook]
      pytest_collection_finish [hook]
          session: <Session maverick exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
        pytest_report_collectionfinish [hook]
            config: <_pytest.config.Config object at 0x105bad480>
            items: [<Function test_pkg[ansible://instance-nginx]>, <Function test_pkg[ansible://instance-mariadb-server]>, <Function test_pkg[ansible://instance-php-fpm]>, <Function test_svc[ansible://instance-nginx]>, <Function test_svc[ansible://instance-mariadb]>, <Function test_svc[ansible://instance-php8.1-fpm]>]
            start_path: /Users/maverick/ansible_roles_test/lemp/molecule/default
            startdir: /Users/maverick/ansible_roles_test/lemp/molecule/default
        finish pytest_report_collectionfinish --> [] [hook]
      finish pytest_collection_finish --> [] [hook]
    finish pytest_collection --> None [hook]
    pytest_runtestloop [hook]
        session: <Session maverick exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=6>
      pytest_runtest_protocol [hook]
          item: <Function test_pkg[ansible://instance-nginx]>
          nextitem: <Function test_pkg[ansible://instance-mariadb-server]>
        pytest_runtest_logstart [hook]
            nodeid: ansible_roles_test/lemp/molecule/default/tests/test_default.py::test_pkg[ansible://instance-nginx]
            location: ('ansible_roles_test/lemp/molecule/default/tests/test_default.py', 7, 'test_pkg[ansible://instance-nginx]')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_pkg[ansible://instance-nginx]>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='_testinfra_host' scope='module' baseid=''>
              request: <SubRequest '_testinfra_host' for <Function test_pkg[ansible://instance-nginx]>>
          finish pytest_fixture_setup --> <testinfra.host.Host ansible://instance> [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='host' scope='module' baseid=''>
              request: <SubRequest 'host' for <Function test_pkg[ansible://instance-nginx]>>
          finish pytest_fixture_setup --> <testinfra.host.Host ansible://instance> [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='pkg' scope='function' baseid=''>
              request: <SubRequest 'pkg' for <Function test_pkg[ansible://instance-nginx]>>
          finish pytest_fixture_setup --> nginx [hook]
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_pkg[ansible://instance-nginx]>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'ansible_roles_test/lemp/molecule/default/tests/test_default.py::test_pkg[ansible://instance-nginx]' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'ansible_roles_test/lemp/molecule/default/tests/test_default.py::test_pkg[ansible://instance-nginx]' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'ansible_roles_test/lemp/molecule/default/tests/test_default.py::test_pkg[ansible://instance-nginx]' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x105bad480>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_pkg[ansible://instance-nginx]>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_pkg[ansible://instance-nginx]>
          matched marked file 'testinfra.modules.package' (from 'testinfra') [assertion]
          find_module called for: testinfra.modules.package [assertion]
          found cached rewritten pyc for /Users/maverick/.pyenv/versions/3.10.8/envs/ansible-env/lib/python3.10/site-packages/testinfra/modules/package.py [assertion]
          matched marked file 'testinfra.modules.systeminfo' (from 'testinfra') [assertion]
          find_module called for: testinfra.modules.systeminfo [assertion]
          found cached rewritten pyc for /Users/maverick/.pyenv/versions/3.10.8/envs/ansible-env/lib/python3.10/site-packages/testinfra/modules/systeminfo.py [assertion]
          matched marked file 'testinfra.backend.docker' (from 'testinfra') [assertion]
          find_module called for: testinfra.backend.docker [assertion]
          found cached rewritten pyc for /Users/maverick/.pyenv/versions/3.10.8/envs/ansible-env/lib/python3.10/site-packages/testinfra/backend/docker.py [assertion]
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_pkg[ansible://instance-nginx]>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'ansible_roles_test/lemp/molecule/default/tests/test_default.py::test_pkg[ansible://instance-nginx]' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'ansible_roles_test/lemp/molecule/default/tests/test_default.py::test_pkg[ansible://instance-nginx]' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'ansible_roles_test/lemp/molecule/default/tests/test_default.py::test_pkg[ansible://instance-nginx]' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x105bad480>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_pkg[ansible://instance-nginx]>
            nextitem: <Function test_pkg[ansible://instance-mariadb-server]>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='pkg' scope='function' baseid=''>
              request: <SubRequest 'pkg' for <Function test_pkg[ansible://instance-nginx]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_pkg[ansible://instance-nginx]>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'ansible_roles_test/lemp/molecule/default/tests/test_default.py::test_pkg[ansible://instance-nginx]' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'ansible_roles_test/lemp/molecule/default/tests/test_default.py::test_pkg[ansible://instance-nginx]' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'ansible_roles_test/lemp/molecule/default/tests/test_default.py::test_pkg[ansible://instance-nginx]' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x105bad480>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: ansible_roles_test/lemp/molecule/default/tests/test_default.py::test_pkg[ansible://instance-nginx]
            location: ('ansible_roles_test/lemp/molecule/default/tests/test_default.py', 7, 'test_pkg[ansible://instance-nginx]')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_pkg[ansible://instance-mariadb-server]>
          nextitem: <Function test_pkg[ansible://instance-php-fpm]>
        pytest_runtest_logstart [hook]
            nodeid: ansible_roles_test/lemp/molecule/default/tests/test_default.py::test_pkg[ansible://instance-mariadb-server]
            location: ('ansible_roles_test/lemp/molecule/default/tests/test_default.py', 7, 'test_pkg[ansible://instance-mariadb-server]')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_pkg[ansible://instance-mariadb-server]>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='pkg' scope='function' baseid=''>
              request: <SubRequest 'pkg' for <Function test_pkg[ansible://instance-mariadb-server]>>
          finish pytest_fixture_setup --> mariadb-server [hook]
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_pkg[ansible://instance-mariadb-server]>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'ansible_roles_test/lemp/molecule/default/tests/test_default.py::test_pkg[ansible://instance-mariadb-server]' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'ansible_roles_test/lemp/molecule/default/tests/test_default.py::test_pkg[ansible://instance-mariadb-server]' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'ansible_roles_test/lemp/molecule/default/tests/test_default.py::test_pkg[ansible://instance-mariadb-server]' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x105bad480>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_pkg[ansible://instance-mariadb-server]>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_pkg[ansible://instance-mariadb-server]>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_pkg[ansible://instance-mariadb-server]>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'ansible_roles_test/lemp/molecule/default/tests/test_default.py::test_pkg[ansible://instance-mariadb-server]' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'ansible_roles_test/lemp/molecule/default/tests/test_default.py::test_pkg[ansible://instance-mariadb-server]' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'ansible_roles_test/lemp/molecule/default/tests/test_default.py::test_pkg[ansible://instance-mariadb-server]' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x105bad480>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_pkg[ansible://instance-mariadb-server]>
            nextitem: <Function test_pkg[ansible://instance-php-fpm]>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='pkg' scope='function' baseid=''>
              request: <SubRequest 'pkg' for <Function test_pkg[ansible://instance-mariadb-server]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_pkg[ansible://instance-mariadb-server]>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'ansible_roles_test/lemp/molecule/default/tests/test_default.py::test_pkg[ansible://instance-mariadb-server]' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'ansible_roles_test/lemp/molecule/default/tests/test_default.py::test_pkg[ansible://instance-mariadb-server]' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'ansible_roles_test/lemp/molecule/default/tests/test_default.py::test_pkg[ansible://instance-mariadb-server]' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x105bad480>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: ansible_roles_test/lemp/molecule/default/tests/test_default.py::test_pkg[ansible://instance-mariadb-server]
            location: ('ansible_roles_test/lemp/molecule/default/tests/test_default.py', 7, 'test_pkg[ansible://instance-mariadb-server]')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_pkg[ansible://instance-php-fpm]>
          nextitem: <Function test_svc[ansible://instance-nginx]>
        pytest_runtest_logstart [hook]
            nodeid: ansible_roles_test/lemp/molecule/default/tests/test_default.py::test_pkg[ansible://instance-php-fpm]
            location: ('ansible_roles_test/lemp/molecule/default/tests/test_default.py', 7, 'test_pkg[ansible://instance-php-fpm]')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_pkg[ansible://instance-php-fpm]>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='pkg' scope='function' baseid=''>
              request: <SubRequest 'pkg' for <Function test_pkg[ansible://instance-php-fpm]>>
          finish pytest_fixture_setup --> php-fpm [hook]
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_pkg[ansible://instance-php-fpm]>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'ansible_roles_test/lemp/molecule/default/tests/test_default.py::test_pkg[ansible://instance-php-fpm]' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'ansible_roles_test/lemp/molecule/default/tests/test_default.py::test_pkg[ansible://instance-php-fpm]' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'ansible_roles_test/lemp/molecule/default/tests/test_default.py::test_pkg[ansible://instance-php-fpm]' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x105bad480>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_pkg[ansible://instance-php-fpm]>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_pkg[ansible://instance-php-fpm]>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_pkg[ansible://instance-php-fpm]>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'ansible_roles_test/lemp/molecule/default/tests/test_default.py::test_pkg[ansible://instance-php-fpm]' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'ansible_roles_test/lemp/molecule/default/tests/test_default.py::test_pkg[ansible://instance-php-fpm]' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'ansible_roles_test/lemp/molecule/default/tests/test_default.py::test_pkg[ansible://instance-php-fpm]' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x105bad480>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_pkg[ansible://instance-php-fpm]>
            nextitem: <Function test_svc[ansible://instance-nginx]>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='pkg' scope='function' baseid=''>
              request: <SubRequest 'pkg' for <Function test_pkg[ansible://instance-php-fpm]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_pkg[ansible://instance-php-fpm]>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'ansible_roles_test/lemp/molecule/default/tests/test_default.py::test_pkg[ansible://instance-php-fpm]' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'ansible_roles_test/lemp/molecule/default/tests/test_default.py::test_pkg[ansible://instance-php-fpm]' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'ansible_roles_test/lemp/molecule/default/tests/test_default.py::test_pkg[ansible://instance-php-fpm]' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x105bad480>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: ansible_roles_test/lemp/molecule/default/tests/test_default.py::test_pkg[ansible://instance-php-fpm]
            location: ('ansible_roles_test/lemp/molecule/default/tests/test_default.py', 7, 'test_pkg[ansible://instance-php-fpm]')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_svc[ansible://instance-nginx]>
          nextitem: <Function test_svc[ansible://instance-mariadb]>
        pytest_runtest_logstart [hook]
            nodeid: ansible_roles_test/lemp/molecule/default/tests/test_default.py::test_svc[ansible://instance-nginx]
            location: ('ansible_roles_test/lemp/molecule/default/tests/test_default.py', 17, 'test_svc[ansible://instance-nginx]')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_svc[ansible://instance-nginx]>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='svc' scope='function' baseid=''>
              request: <SubRequest 'svc' for <Function test_svc[ansible://instance-nginx]>>
          finish pytest_fixture_setup --> nginx [hook]
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_svc[ansible://instance-nginx]>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'ansible_roles_test/lemp/molecule/default/tests/test_default.py::test_svc[ansible://instance-nginx]' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'ansible_roles_test/lemp/molecule/default/tests/test_default.py::test_svc[ansible://instance-nginx]' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'ansible_roles_test/lemp/molecule/default/tests/test_default.py::test_svc[ansible://instance-nginx]' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x105bad480>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_svc[ansible://instance-nginx]>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_svc[ansible://instance-nginx]>
          matched marked file 'testinfra.modules.service' (from 'testinfra') [assertion]
          find_module called for: testinfra.modules.service [assertion]
          found cached rewritten pyc for /Users/maverick/.pyenv/versions/3.10.8/envs/ansible-env/lib/python3.10/site-packages/testinfra/modules/service.py [assertion]
          matched marked file 'testinfra.modules.file' (from 'testinfra') [assertion]
          find_module called for: testinfra.modules.file [assertion]
          found cached rewritten pyc for /Users/maverick/.pyenv/versions/3.10.8/envs/ansible-env/lib/python3.10/site-packages/testinfra/modules/file.py [assertion]
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_svc[ansible://instance-nginx]>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'ansible_roles_test/lemp/molecule/default/tests/test_default.py::test_svc[ansible://instance-nginx]' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'ansible_roles_test/lemp/molecule/default/tests/test_default.py::test_svc[ansible://instance-nginx]' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'ansible_roles_test/lemp/molecule/default/tests/test_default.py::test_svc[ansible://instance-nginx]' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x105bad480>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_svc[ansible://instance-nginx]>
            nextitem: <Function test_svc[ansible://instance-mariadb]>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='svc' scope='function' baseid=''>
              request: <SubRequest 'svc' for <Function test_svc[ansible://instance-nginx]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_svc[ansible://instance-nginx]>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'ansible_roles_test/lemp/molecule/default/tests/test_default.py::test_svc[ansible://instance-nginx]' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'ansible_roles_test/lemp/molecule/default/tests/test_default.py::test_svc[ansible://instance-nginx]' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'ansible_roles_test/lemp/molecule/default/tests/test_default.py::test_svc[ansible://instance-nginx]' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x105bad480>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: ansible_roles_test/lemp/molecule/default/tests/test_default.py::test_svc[ansible://instance-nginx]
            location: ('ansible_roles_test/lemp/molecule/default/tests/test_default.py', 17, 'test_svc[ansible://instance-nginx]')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_svc[ansible://instance-mariadb]>
          nextitem: <Function test_svc[ansible://instance-php8.1-fpm]>
        pytest_runtest_logstart [hook]
            nodeid: ansible_roles_test/lemp/molecule/default/tests/test_default.py::test_svc[ansible://instance-mariadb]
            location: ('ansible_roles_test/lemp/molecule/default/tests/test_default.py', 17, 'test_svc[ansible://instance-mariadb]')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_svc[ansible://instance-mariadb]>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='svc' scope='function' baseid=''>
              request: <SubRequest 'svc' for <Function test_svc[ansible://instance-mariadb]>>
          finish pytest_fixture_setup --> mariadb [hook]
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_svc[ansible://instance-mariadb]>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'ansible_roles_test/lemp/molecule/default/tests/test_default.py::test_svc[ansible://instance-mariadb]' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'ansible_roles_test/lemp/molecule/default/tests/test_default.py::test_svc[ansible://instance-mariadb]' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'ansible_roles_test/lemp/molecule/default/tests/test_default.py::test_svc[ansible://instance-mariadb]' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x105bad480>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_svc[ansible://instance-mariadb]>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_svc[ansible://instance-mariadb]>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_svc[ansible://instance-mariadb]>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'ansible_roles_test/lemp/molecule/default/tests/test_default.py::test_svc[ansible://instance-mariadb]' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'ansible_roles_test/lemp/molecule/default/tests/test_default.py::test_svc[ansible://instance-mariadb]' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'ansible_roles_test/lemp/molecule/default/tests/test_default.py::test_svc[ansible://instance-mariadb]' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x105bad480>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_svc[ansible://instance-mariadb]>
            nextitem: <Function test_svc[ansible://instance-php8.1-fpm]>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='svc' scope='function' baseid=''>
              request: <SubRequest 'svc' for <Function test_svc[ansible://instance-mariadb]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_svc[ansible://instance-mariadb]>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'ansible_roles_test/lemp/molecule/default/tests/test_default.py::test_svc[ansible://instance-mariadb]' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'ansible_roles_test/lemp/molecule/default/tests/test_default.py::test_svc[ansible://instance-mariadb]' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'ansible_roles_test/lemp/molecule/default/tests/test_default.py::test_svc[ansible://instance-mariadb]' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x105bad480>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: ansible_roles_test/lemp/molecule/default/tests/test_default.py::test_svc[ansible://instance-mariadb]
            location: ('ansible_roles_test/lemp/molecule/default/tests/test_default.py', 17, 'test_svc[ansible://instance-mariadb]')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_svc[ansible://instance-php8.1-fpm]>
          nextitem: None
        pytest_runtest_logstart [hook]
            nodeid: ansible_roles_test/lemp/molecule/default/tests/test_default.py::test_svc[ansible://instance-php8.1-fpm]
            location: ('ansible_roles_test/lemp/molecule/default/tests/test_default.py', 17, 'test_svc[ansible://instance-php8.1-fpm]')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_svc[ansible://instance-php8.1-fpm]>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='svc' scope='function' baseid=''>
              request: <SubRequest 'svc' for <Function test_svc[ansible://instance-php8.1-fpm]>>
          finish pytest_fixture_setup --> php8.1-fpm [hook]
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_svc[ansible://instance-php8.1-fpm]>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'ansible_roles_test/lemp/molecule/default/tests/test_default.py::test_svc[ansible://instance-php8.1-fpm]' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'ansible_roles_test/lemp/molecule/default/tests/test_default.py::test_svc[ansible://instance-php8.1-fpm]' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'ansible_roles_test/lemp/molecule/default/tests/test_default.py::test_svc[ansible://instance-php8.1-fpm]' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x105bad480>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_svc[ansible://instance-php8.1-fpm]>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_svc[ansible://instance-php8.1-fpm]>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_svc[ansible://instance-php8.1-fpm]>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'ansible_roles_test/lemp/molecule/default/tests/test_default.py::test_svc[ansible://instance-php8.1-fpm]' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'ansible_roles_test/lemp/molecule/default/tests/test_default.py::test_svc[ansible://instance-php8.1-fpm]' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'ansible_roles_test/lemp/molecule/default/tests/test_default.py::test_svc[ansible://instance-php8.1-fpm]' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x105bad480>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_svc[ansible://instance-php8.1-fpm]>
            nextitem: None
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='svc' scope='function' baseid=''>
              request: <SubRequest 'svc' for <Function test_svc[ansible://instance-php8.1-fpm]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='host' scope='module' baseid=''>
              request: <SubRequest 'host' for <Function test_svc[ansible://instance-php8.1-fpm]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='host' scope='module' baseid=''>
              request: <SubRequest 'host' for <Function test_svc[ansible://instance-php8.1-fpm]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='host' scope='module' baseid=''>
              request: <SubRequest 'host' for <Function test_svc[ansible://instance-mariadb]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='host' scope='module' baseid=''>
              request: <SubRequest 'host' for <Function test_svc[ansible://instance-nginx]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='host' scope='module' baseid=''>
              request: <SubRequest 'host' for <Function test_pkg[ansible://instance-php-fpm]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='host' scope='module' baseid=''>
              request: <SubRequest 'host' for <Function test_pkg[ansible://instance-mariadb-server]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='host' scope='module' baseid=''>
              request: <SubRequest 'host' for <Function test_pkg[ansible://instance-nginx]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_testinfra_host' scope='module' baseid=''>
              request: <SubRequest '_testinfra_host' for <Function test_svc[ansible://instance-php8.1-fpm]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='host' scope='module' baseid=''>
              request: <SubRequest 'host' for <Function test_svc[ansible://instance-mariadb]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_testinfra_host' scope='module' baseid=''>
              request: <SubRequest '_testinfra_host' for <Function test_svc[ansible://instance-mariadb]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='host' scope='module' baseid=''>
              request: <SubRequest 'host' for <Function test_svc[ansible://instance-nginx]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_testinfra_host' scope='module' baseid=''>
              request: <SubRequest '_testinfra_host' for <Function test_svc[ansible://instance-nginx]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='host' scope='module' baseid=''>
              request: <SubRequest 'host' for <Function test_pkg[ansible://instance-php-fpm]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_testinfra_host' scope='module' baseid=''>
              request: <SubRequest '_testinfra_host' for <Function test_pkg[ansible://instance-php-fpm]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='host' scope='module' baseid=''>
              request: <SubRequest 'host' for <Function test_pkg[ansible://instance-mariadb-server]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_testinfra_host' scope='module' baseid=''>
              request: <SubRequest '_testinfra_host' for <Function test_pkg[ansible://instance-mariadb-server]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='host' scope='module' baseid=''>
              request: <SubRequest 'host' for <Function test_pkg[ansible://instance-nginx]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='_testinfra_host' scope='module' baseid=''>
              request: <SubRequest '_testinfra_host' for <Function test_pkg[ansible://instance-nginx]>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_svc[ansible://instance-php8.1-fpm]>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'ansible_roles_test/lemp/molecule/default/tests/test_default.py::test_svc[ansible://instance-php8.1-fpm]' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'ansible_roles_test/lemp/molecule/default/tests/test_default.py::test_svc[ansible://instance-php8.1-fpm]' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'ansible_roles_test/lemp/molecule/default/tests/test_default.py::test_svc[ansible://instance-php8.1-fpm]' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x105bad480>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: ansible_roles_test/lemp/molecule/default/tests/test_default.py::test_svc[ansible://instance-php8.1-fpm]
            location: ('ansible_roles_test/lemp/molecule/default/tests/test_default.py', 17, 'test_svc[ansible://instance-php8.1-fpm]')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
    finish pytest_runtestloop --> True [hook]
    pytest_sessionfinish [hook]
        session: <Session maverick exitstatus=0 testsfailed=0 testscollected=6>
        exitstatus: 0
      pytest_terminal_summary [hook]
          terminalreporter: <_pytest.terminal.TerminalReporter object at 0x105c93040>
          exitstatus: 0
          config: <_pytest.config.Config object at 0x105bad480>
      finish pytest_terminal_summary --> [] [hook]
    finish pytest_sessionfinish --> [] [hook]
    pytest_unconfigure [hook]
        config: <_pytest.config.Config object at 0x105bad480>
    finish pytest_unconfigure --> [] [hook]
